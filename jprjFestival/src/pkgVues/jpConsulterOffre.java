/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package pkgVues;

import java.util.Iterator;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import org.hibernate.HibernateException;
import org.hibernate.Query;
import org.hibernate.Transaction;
import pkgEntite.Etablissement;
import pkgEntite.Offre;
import pkgFestival.jfrMenu;

/**
 *
 * @author etudsio
 */
public class jpConsulterOffre extends javax.swing.JPanel {

	/**
	 * Creates new form jpConsulterOffre
	 */
	public jpConsulterOffre() {
		initComponents();
		_chargerListe();
	}
	
        /**
         * methode de base chargé d'afficher l'interface
         */
    private void _chargerListe() {
        lstEtab.removeAllItems();
        lstEtab.addItem("");
        try{
            //On charge la liste des établissements
            String sReq = "FROM Etablissement";

            jfrMenu.getSession().beginTransaction();
            Query q = jfrMenu.getSession().createQuery(sReq);
            Iterator etab = q.iterate();

            while(etab.hasNext())
            {
                Etablissement unEtablissement = (Etablissement) etab.next();
                 lstEtab.addItem(unEtablissement.getEtaNom());
            }
        }
        catch(HibernateException e){
            JOptionPane.showMessageDialog(null, "Impossible de charger les établissements !", "Erreur", JOptionPane.ERROR_MESSAGE);
        }
    }
    
        /**
         * charge les offre dans le tableau suivant l'établissement selectionné
         */
    private void _loadTable() {
        // on vide le tableau
        int nbligne = tabOffres.getRowCount();
        if(nbligne > 0){
            for(int i=0; i < nbligne; i++){
                ((DefaultTableModel)tabOffres.getModel()).removeRow(0);
            }
        }
        
        if(!lstEtab.getSelectedItem().toString().equals(""))
        {
            try{
                // on charge l'id de l'etablissement
                String sReqEtab = "FROM Etablissement WHERE Eta_Nom = :etabNom";

                Query qEtab = jfrMenu.getSession().createQuery(sReqEtab);
                qEtab.setString("etabNom", lstEtab.getSelectedItem().toString());
                //System.out.println(qEtab.uniqueResult()); 
                Etablissement unEtablissement = (Etablissement) qEtab.uniqueResult();
                
                // on charge les offres
                String sReqOffre = "FROM Offre WHERE Off_Etablissement = :etabId";

                Query qOffre = jfrMenu.getSession().createQuery(sReqOffre);
                qOffre.setString("etabId", unEtablissement.getEtaId());

                Iterator offres = qOffre.iterate();

                while(offres.hasNext()){
                    Offre uneOffre = (Offre) offres.next();
                    ((DefaultTableModel) tabOffres.getModel()).addRow(new Object[] {
                        uneOffre.getTypechambre().getTchId(),
                        uneOffre.getTypechambre().getTchLibelle(),
                        uneOffre.getOffCapacite(),
                        uneOffre.getOffNbchambres()
                    });
                }
            }
            catch(HibernateException e){
                JOptionPane.showMessageDialog(null, "Impossible de charger l'établissement !", "Erreur", JOptionPane.ERROR_MESSAGE);
                
            }
        }
    }
	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lstEtab = new javax.swing.JComboBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabOffres = new javax.swing.JTable();
        txtCapacite = new javax.swing.JTextField();
        jbtRemove = new javax.swing.JButton();
        jbtSubmit = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txtNbChamb = new javax.swing.JTextField();
        txtType = new javax.swing.JTextField();

        lstEtab.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                lstEtabItemStateChanged(evt);
            }
        });

        tabOffres.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Type", "Libellé", "Capacité", "Nb chambre"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tabOffres.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tabOffresMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tabOffres);

        jbtRemove.setText("Supprimer");
        jbtRemove.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jbtRemoveMouseClicked(evt);
            }
        });

        jbtSubmit.setText("Modifier");
        jbtSubmit.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jbtSubmitMouseClicked(evt);
            }
        });

        jLabel1.setText("Type :");

        jLabel2.setText("Capacité");

        jLabel3.setText("Quantité");

        txtType.setEditable(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(118, 118, 118)
                .addComponent(lstEtab, 0, 230, Short.MAX_VALUE)
                .addGap(138, 138, 138))
            .addGroup(layout.createSequentialGroup()
                .addGap(76, 76, 76)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jbtRemove)
                        .addGap(90, 90, 90)
                        .addComponent(jbtSubmit))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtCapacite, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(txtNbChamb)
                            .addComponent(txtType, javax.swing.GroupLayout.DEFAULT_SIZE, 149, Short.MAX_VALUE))))
                .addContainerGap(166, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lstEtab, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtCapacite, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtNbChamb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jbtSubmit)
                    .addComponent(jbtRemove))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    /**
     * si on selectionne un etablissement dans la liste
     * @param evt 
     */
    private void lstEtabItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_lstEtabItemStateChanged

        // on appelle la methode de chargement du tableau
        _loadTable();
    }//GEN-LAST:event_lstEtabItemStateChanged

    /**
     * si on selectionne une offre dans le tableau
     * @param evt 
     */
    private void tabOffresMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tabOffresMouseClicked
        //selection de l'ID d'une ligne
        int line = tabOffres.getSelectedRow();

        String typeId = tabOffres.getValueAt(line, 0).toString();
        
        if (typeId != null)
        {
            txtType.setText(typeId);
            txtCapacite.setText(tabOffres.getValueAt(line, 2).toString());
            txtNbChamb.setText(tabOffres.getValueAt(line, 3).toString());
            
        }
    }//GEN-LAST:event_tabOffresMouseClicked

    /**
     * si on demande un modification d'une offre
     * @param evt 
     */
    private void jbtSubmitMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jbtSubmitMouseClicked
        // on trouve l'id de l'etab
        if(!lstEtab.getSelectedItem().toString().equals(""))
        {
            try{
                // on charge l'id de l'etablissement
                String sReqEtab = "FROM Etablissement WHERE Eta_Nom = :etabNom";

                Query qEtab = jfrMenu.getSession().createQuery(sReqEtab);
                qEtab.setString("etabNom", lstEtab.getSelectedItem().toString());
                
                Etablissement unEtablissement = (Etablissement) qEtab.uniqueResult();
        
                // la ligne selected
                int line = tabOffres.getSelectedRow();
                // l'id du typeChambre selected
                String typeId = tabOffres.getValueAt(line, 0).toString();

                if (typeId != null)
                {
                    try
                    {
                        // req de MAJ de l'offre
                        String sReqOffre = "From Offre Where Off_Etablissement = :etabId AND Off_TypeChambre = :typeId";

                        Query qOffre = jfrMenu.getSession().createQuery(sReqOffre);
                        // on bind les marqueurs
                        qOffre.setString("etabId", unEtablissement.getEtaId());
                        qOffre.setString("typeId", typeId);
                        // l'offre à MAJ
                        Offre uneOffre = (Offre) qOffre.uniqueResult();

                        Integer nCapacite = Integer.parseInt(txtCapacite.getText());
                        uneOffre.setOffCapacite(nCapacite.byteValue());

                        Integer nNbChamb = Integer.parseInt(txtNbChamb.getText());
                        uneOffre.setOffNbchambres(nNbChamb.byteValue());

                        // on lance la sauvegarde
                        Transaction tx = jfrMenu.getSession().beginTransaction();
                        jfrMenu.getSession().update(uneOffre);
                        tx.commit();
                        // on recharge le tableau
                        _loadTable();
                        // on vide les champs
                        txtType.setText("");
                        txtCapacite.setText("");
                        txtNbChamb.setText("");

                        JOptionPane.showMessageDialog(null, "Modification bien effectuée !", "Inforamtion", JOptionPane.INFORMATION_MESSAGE);
                    }
                    catch(Exception e){
                        JOptionPane.showMessageDialog(null, "Erreur lors de la modification !", "Erreur", JOptionPane.ERROR_MESSAGE);
                    }
                }
                else{
                    JOptionPane.showMessageDialog(null, "Selectionez une offre !", "Erreur", JOptionPane.ERROR_MESSAGE);
                }
            }
            catch(HibernateException e){
                JOptionPane.showMessageDialog(null, "Impossible de charger l'établissement !", "Erreur", JOptionPane.ERROR_MESSAGE);
                
            }
        }
    }//GEN-LAST:event_jbtSubmitMouseClicked

        /**
         * si on demande la supression de l'offre
         * @param evt 
         */
    private void jbtRemoveMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jbtRemoveMouseClicked
        
        // on trouve le nom de l'etab
        if(!lstEtab.getSelectedItem().toString().equals(""))
        {
            try{
                // on charge l'id de l'etablissement
                String sReqEtab = "FROM Etablissement WHERE Eta_Nom = :etabNom";

                Query qEtab = jfrMenu.getSession().createQuery(sReqEtab);
                qEtab.setString("etabNom", lstEtab.getSelectedItem().toString());
                
                Etablissement unEtablissement = (Etablissement) qEtab.uniqueResult();
        
                // la ligne d'offre selected
                int line = tabOffres.getSelectedRow();
                // l'id du typeChambre selected
                String typeId = tabOffres.getValueAt(line, 0).toString();

                if (typeId != null)
                {
                    try
                    {
                        int reply = JOptionPane.showConfirmDialog(null, "Voulez-vous supprimer cette Offre ?", "Attention", JOptionPane.YES_NO_OPTION);
                            // si il dit oui a la confirmation
                        if (reply == JOptionPane.YES_OPTION)
                        {
                            // req de MAJ de l'offre
                            String sReqOffre = "From Offre Where Off_Etablissement = :etabId AND Off_TypeChambre = :typeId";

                            Query qOffre = jfrMenu.getSession().createQuery(sReqOffre);
                            // on bind les marqueurs
                            qOffre.setString("etabId", unEtablissement.getEtaId());
                            qOffre.setString("typeId", typeId);
                            // l'offre à MAJ
                            Offre uneOffre = (Offre) qOffre.uniqueResult();

                            // on lance la sauvegarde
                            Transaction tx = jfrMenu.getSession().beginTransaction();
                            jfrMenu.getSession().delete(uneOffre);
                            tx.commit();
                            // on recharge le tableau
                            _loadTable();

                            JOptionPane.showMessageDialog(null, "Suppression bien effectuée !", "Inforamtion", JOptionPane.INFORMATION_MESSAGE);
                        }
                    }
                    catch(Exception e){
                        JOptionPane.showMessageDialog(null, "Erreur lors de la suppression !", "Erreur", JOptionPane.ERROR_MESSAGE);
                    }
                }
                else{
                    JOptionPane.showMessageDialog(null, "Selectionez une offre !", "Erreur", JOptionPane.ERROR_MESSAGE);
                }
            }
            catch(HibernateException e){
                JOptionPane.showMessageDialog(null, "Impossible de charger l'établissement !", "Erreur", JOptionPane.ERROR_MESSAGE);
                
            }
        }
    }//GEN-LAST:event_jbtRemoveMouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton jbtRemove;
    private javax.swing.JButton jbtSubmit;
    private javax.swing.JComboBox lstEtab;
    private javax.swing.JTable tabOffres;
    private javax.swing.JTextField txtCapacite;
    private javax.swing.JTextField txtNbChamb;
    private javax.swing.JTextField txtType;
    // End of variables declaration//GEN-END:variables
}
